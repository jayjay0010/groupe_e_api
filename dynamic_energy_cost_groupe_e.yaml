command_line:
  #get vario_plus tariffs from now until tomorrow end of day
  #must be scheduled at around 6PM to be sure to have to whole data from tomorrow, otherwise, it gets data of today
  - sensor:
      name: vario_plus_tarif_projection
      scan_interval: 31536000
      command: >
        if [ $(date +%H) -lt 18 ]; then
          echo "{\"vario_plus_for_tomorrow\":" $(
            curl -s 'https://api.tariffs.groupe-e.ch/v1/tariffs/vario_plus?start_timestamp={{ (now()+ timedelta(days=-1)).strftime('%Y-%m-%dT18:00:00%:z') }}&end_timestamp={{ (now() + timedelta(days=1)).strftime('%Y-%m-%dT00:00:00%:z') }}'
          ) "}"
        else
          echo "{\"vario_plus_for_tomorrow\":" $(
            curl -s 'https://api.tariffs.groupe-e.ch/v1/tariffs/vario_plus?start_timestamp={{ (now()).strftime('%Y-%m-%dT18:00:00%:z') }}&end_timestamp={{ (now() + timedelta(days=2)).strftime('%Y-%m-%dT00:00:00%:z') }}'
          ) "}"
        fi
      value_template: >
        {{ value_json.vario_plus_for_tomorrow | length }}
      json_attributes:
        - vario_plus_for_tomorrow

  #get dt_plus tariffs from now until tomorrow end of day
  #must be scheduled at around 6PM to be sure to have to whole data from tomorrow, otherwise, it gets data of today
  - sensor:
      name: dt_plus_tarif_projection
      scan_interval: 31536000
      command: >
        if [ $(date +%H) -lt 18 ]; then
          echo "{\"dt_plus_for_tomorrow\":" $(
            curl -s 'https://api.tariffs.groupe-e.ch/v1/tariffs/dt_plus?start_timestamp={{ (now()+ timedelta(days=-1)).strftime('%Y-%m-%dT18:00:00%:z') }}&end_timestamp={{ (now() + timedelta(days=1)).strftime('%Y-%m-%dT00:00:00%:z') }}'
          ) "}"
        else
          echo "{\"dt_plus_for_tomorrow\":" $(
            curl -s 'https://api.tariffs.groupe-e.ch/v1/tariffs/dt_plus?start_timestamp={{ (now()).strftime('%Y-%m-%dT18:00:00%:z') }}&end_timestamp={{ (now() + timedelta(days=2)).strftime('%Y-%m-%dT00:00:00%:z') }}'
          ) "}"
        fi
      value_template: >
        {{ value_json.dt_plus_for_tomorrow | length }}
      json_attributes:
        - dt_plus_for_tomorrow

sensor:
  #extract the current vario plus energy cost from attributes of vario_plus_tarif_projection
  - platform: template
    sensors:
      vario_plus_tarif_live:
        friendly_name: "Vario Plus live"
        unit_of_measurement: "Rp./kWh"
        value_template: >
          {%- set dt = now() -%}
          {%- set minutes = (dt.minute + dt.second/60 + dt.microsecond/1000000) / 15 -%}
          {%- set rounded = (minutes | int) * 15 -%}
          {%- set rounded_time = dt.replace(minute=0, second=0, microsecond=0) + timedelta(minutes=rounded) -%}
          {%- set vario_plus_attr = state_attr('sensor.vario_plus_tarif_projection', 'vario_plus_for_tomorrow') -%}
          {%- if vario_plus_attr is not none -%}
            {%- for item in vario_plus_attr -%}
              {%- if item.start_timestamp == rounded_time.strftime('%Y-%m-%dT%H:%M:%S%:z') -%}
                {# Traitement spécifique si format %:z #}
                {{- item.vario_plus -}}
              {%- elif item.start_timestamp == rounded_time.strftime('%Y-%m-%dT%H:%M:%S%z') -%}
                {# Traitement spécifique si format %z #}
                {{- item.vario_plus -}}
              {%- endif -%}
            {%- endfor -%}
          {%- endif -%}

  #convert vario_plus_tarif_live in franc
  - platform: template
    sensors:
      vario_plus_tarif_live_fr:
        friendly_name: "Vario Plus live in franc"
        unit_of_measurement: "fr./kWh"
        value_template: >
          {%- set value = states('sensor.vario_plus_tarif_live') | float / 100  -%}
          {{  value  }}

  #extract the current dt plus energy cost from attributes of dt_plus_tarif_projection
  - platform: template
    sensors:
      dt_plus_tarif_live:
        friendly_name: "dt Plus live"
        unit_of_measurement: "Rp./kWh"
        value_template: >
          {%- set dt = now() -%}
          {%- set minutes = (dt.minute + dt.second/60 + dt.microsecond/1000000) / 15 -%}
          {%- set rounded = (minutes | int) * 15 -%}
          {%- set rounded_time = dt.replace(minute=0, second=0, microsecond=0) + timedelta(minutes=rounded) -%}
          {%- set dt_plus_attr = state_attr('sensor.dt_plus_tarif_projection', 'dt_plus_for_tomorrow') -%}
          {%- if dt_plus_attr is not none -%}
            {%- for item in dt_plus_attr -%}
              {%- if item.start_timestamp == rounded_time.strftime('%Y-%m-%dT%H:%M:%S%:z') -%}
                {# Traitement spécifique si format %:z #}
                {{- item.dt_plus -}}
              {%- elif item.start_timestamp == rounded_time.strftime('%Y-%m-%dT%H:%M:%S%z') -%}
                {# Traitement spécifique si format %z #}
                {{- item.dt_plus -}}
              {%- endif -%}
            {%- endfor -%}
          {%- endif -%}

  #convert vario_plus_tarif_live in franc
  - platform: template
    sensors:
      dt_plus_tarif_live_fr:
        friendly_name: "dt Plus live in franc"
        unit_of_measurement: "fr./kWh"
        value_template: >
          {%- set value = states('sensor.dt_plus_tarif_live') | float / 100  -%}
          {{  value  }}

  #Identify the time with the cheapest 1hours energy cost during night
  - platform: template
    sensors:
      cheapest_vario_plus_1_hours_night:
        friendly_name: "Cheapest Vario Plus for 1 hour during night"
        value_template: >
          {%- set vario_plus_values = state_attr('sensor.vario_plus_tarif_projection', 'vario_plus_for_tomorrow') -%}
          {%- set min_vario_plus = namespace(result=1000) -%}
          {%- set min_start_time = namespace(result=None) -%}
          {%- set intervals = 4 -%} 
          {%- if vario_plus_values and vario_plus_values | length > intervals -%}
            {%- for i in range(0, vario_plus_values | length - intervals + 1) -%}
              {%- set item_start = as_datetime(vario_plus_values[i].start_timestamp) -%}
              {%- set item_hour = item_start.hour -%}
              {%- if item_hour >= 22 or item_hour < 7 -%}
                {%- set total_vario_plus = namespace(result=0) -%}
                {%- for j in range(0, intervals) -%}
                  {%- set total_vario_plus.result = total_vario_plus.result + (vario_plus_values[i + j].vario_plus | float) -%}
                {%- endfor -%}
                {%- if min_vario_plus.result == None or total_vario_plus.result < min_vario_plus.result -%}
                  {%- set min_vario_plus.result = total_vario_plus.result -%}
                  {%- set min_start_time.result = vario_plus_values[i].start_timestamp -%}
                {%- endif -%}
              {%- endif -%}  
            {%- endfor -%}
            {{ as_timestamp(min_start_time.result) | timestamp_custom('%H:%M %d.%m.%Y') if min_start_time.result else 'No suitable time found' }}
          {%- else -%}
            No data available
          {%- endif -%}

  #calculate the average price for these 1 hour
  - platform: template
    sensors:
      average_price_vario_plus_1_hours_night:
        friendly_name: "Average Vario Plus cost for 1 hour during night"
        unit_of_measurement: "Rp./kWh"
        value_template: >
          {%- set start_time_str = states('sensor.cheapest_vario_plus_1_hours_night') -%}
          {%- set start_time = strptime(start_time_str, '%H:%M %d.%m.%Y').timestamp() -%}
          {%- set end_time = start_time + 3600 -%}
          {%- set vario_plus_values = state_attr('sensor.vario_plus_tarif_projection', 'vario_plus_for_tomorrow') -%}
          {%- set total_vario_plus = namespace(result=0) -%}
          {%- set count = namespace(result=0) -%}
          {%- for value in vario_plus_values -%}
            {%- set timestamp = as_timestamp(value.start_timestamp) -%}
            {%- if timestamp >= start_time and timestamp < end_time -%}
              {%- set total_vario_plus.result = total_vario_plus.result + (value.vario_plus | float) -%}
              {%- set count.result = count.result + 1 -%}
            {%- endif -%}
          {%- endfor -%}
          {{ (total_vario_plus.result / count.result) | round(2) if count.result > 0 else 'No data available' }}

  #Identify the time with the cheapest 2hours energy cost during night
  - platform: template
    sensors:
      cheapest_vario_plus_2_hours_night:
        friendly_name: "Cheapest Vario Plus for 2 hours during night"
        value_template: >
          {%- set vario_plus_values = state_attr('sensor.vario_plus_tarif_projection', 'vario_plus_for_tomorrow') -%}
          {%- set min_vario_plus = namespace(result=1000) -%}
          {%- set min_start_time = namespace(result=None) -%}
          {%- set intervals = 8 -%} 
          {%- if vario_plus_values and vario_plus_values | length > intervals -%}
            {%- for i in range(0, vario_plus_values | length - intervals + 1) -%}
              {%- set item_start = as_datetime(vario_plus_values[i].start_timestamp) -%}
              {%- set item_hour = item_start.hour -%}
              {%- if item_hour >= 22 or item_hour < 7 -%}
                {%- set total_vario_plus = namespace(result=0) -%}
                {%- for j in range(0, intervals) -%}
                  {%- set total_vario_plus.result = total_vario_plus.result + (vario_plus_values[i + j].vario_plus | float) -%}
                {%- endfor -%}
                {%- if min_vario_plus.result == None or total_vario_plus.result < min_vario_plus.result -%}
                  {%- set min_vario_plus.result = total_vario_plus.result -%}
                  {%- set min_start_time.result = vario_plus_values[i].start_timestamp -%}
                {%- endif -%}
              {%- endif -%}  
            {%- endfor -%}
            {{ as_timestamp(min_start_time.result) | timestamp_custom('%H:%M %d.%m.%Y') if min_start_time.result else 'No suitable time found' }}
          {%- else -%}
            No data available
          {%- endif -%}

  #calculate the average price for these 2 hours
  - platform: template
    sensors:
      average_price_vario_plus_2_hours_night:
        friendly_name: "Average Vario Plus cost for 2 hours during night"
        unit_of_measurement: "Rp./kWh"
        value_template: >
          {%- set start_time_str = states('sensor.cheapest_vario_plus_2_hours_night') -%}
          {%- set start_time = strptime(start_time_str, '%H:%M %d.%m.%Y').timestamp() -%}
          {%- set end_time = start_time + 7200 -%}
          {%- set vario_plus_values = state_attr('sensor.vario_plus_tarif_projection', 'vario_plus_for_tomorrow') -%}
          {%- set total_vario_plus = namespace(result=0) -%}
          {%- set count = namespace(result=0) -%}
          {%- for value in vario_plus_values -%}
            {%- set timestamp = as_timestamp(value.start_timestamp) -%}
            {%- if timestamp >= start_time and timestamp < end_time -%}
              {%- set total_vario_plus.result = total_vario_plus.result + (value.vario_plus | float) -%}
              {%- set count.result = count.result + 1 -%}
            {%- endif -%}
          {%- endfor -%}
          {{ (total_vario_plus.result / count.result) | round(2) if count.result > 0 else 'No data available' }}

  #Identify the time with the cheapest 3hours energy cost during night
  - platform: template
    sensors:
      cheapest_vario_plus_3_hours_night:
        friendly_name: "Cheapest Vario Plus for 3 hours during night"
        value_template: >
          {%- set vario_plus_values = state_attr('sensor.vario_plus_tarif_projection', 'vario_plus_for_tomorrow') -%}
          {%- set min_vario_plus = namespace(result=1000) -%}
          {%- set min_start_time = namespace(result=None) -%}
          {%- set intervals = 12 -%} 
          {%- if vario_plus_values and vario_plus_values | length > intervals -%}
            {%- for i in range(0, vario_plus_values | length - intervals + 1) -%}
              {%- set item_start = as_datetime(vario_plus_values[i].start_timestamp) -%}
              {%- set item_hour = item_start.hour -%}
              {%- if item_hour >= 22 or item_hour < 7 -%}
                {%- set total_vario_plus = namespace(result=0) -%}
                {%- for j in range(0, intervals) -%}
                  {%- set total_vario_plus.result = total_vario_plus.result + (vario_plus_values[i + j].vario_plus | float) -%}
                {%- endfor -%}
                {%- if min_vario_plus.result == None or total_vario_plus.result < min_vario_plus.result -%}
                  {%- set min_vario_plus.result = total_vario_plus.result -%}
                  {%- set min_start_time.result = vario_plus_values[i].start_timestamp -%}
                {%- endif -%}
              {%- endif -%}  
            {%- endfor -%}
            {{ as_timestamp(min_start_time.result) | timestamp_custom('%H:%M %d.%m.%Y') if min_start_time.result else 'No suitable time found' }}
          {%- else -%}
            No data available
          {%- endif -%}

  #calculate the average price for these 3 hours
  - platform: template
    sensors:
      average_price_vario_plus_3_hours_night:
        friendly_name: "Average Vario Plus cost for 3 hours during night"
        unit_of_measurement: "Rp./kWh"
        value_template: >
          {%- set start_time_str = states('sensor.cheapest_vario_plus_3_hours_night') -%}
          {%- set start_time = strptime(start_time_str, '%H:%M %d.%m.%Y').timestamp() -%}
          {%- set end_time = start_time + 10800 -%}
          {%- set vario_plus_values = state_attr('sensor.vario_plus_tarif_projection', 'vario_plus_for_tomorrow') -%}
          {%- set total_vario_plus = namespace(result=0) -%}
          {%- set count = namespace(result=0) -%}
          {%- for value in vario_plus_values -%}
            {%- set timestamp = as_timestamp(value.start_timestamp) -%}
            {%- if timestamp >= start_time and timestamp < end_time -%}
              {%- set total_vario_plus.result = total_vario_plus.result + (value.vario_plus | float) -%}
              {%- set count.result = count.result + 1 -%}
            {%- endif -%}
          {%- endfor -%}
          {{ (total_vario_plus.result / count.result) | round(2) if count.result > 0 else 'No data available' }}

  #Identify the time with the cheapest 1hours energy cost during day
  - platform: template
    sensors:
      cheapest_vario_plus_1_hours_day:
        friendly_name: "Cheapest Vario Plus for 1 hour during day"
        value_template: >
          {%- set vario_plus_values = state_attr('sensor.vario_plus_tarif_projection', 'vario_plus_for_tomorrow') -%}
          {%- set min_vario_plus = namespace(result=1000) -%}
          {%- set min_start_time = namespace(result=None) -%}
          {%- set intervals = 4 -%} 
          {%- if vario_plus_values and vario_plus_values | length > intervals -%}
            {%- for i in range(0, vario_plus_values | length - intervals + 1) -%}
              {%- set item_start = as_datetime(vario_plus_values[i].start_timestamp) -%}
              {%- set item_hour = item_start.hour -%}
              {%- if item_hour >= 7 and item_hour < 21 -%}
                {%- set total_vario_plus = namespace(result=0) -%}
                {%- for j in range(0, intervals) -%}
                  {%- set total_vario_plus.result = total_vario_plus.result + (vario_plus_values[i + j].vario_plus | float) -%}
                {%- endfor -%}
                {%- if min_vario_plus.result == None or total_vario_plus.result < min_vario_plus.result -%}
                  {%- set min_vario_plus.result = total_vario_plus.result -%}
                  {%- set min_start_time.result = vario_plus_values[i].start_timestamp -%}
                {%- endif -%}
              {%- endif -%}  
            {%- endfor -%}
            {{ as_timestamp(min_start_time.result) | timestamp_custom('%H:%M %d.%m.%Y') if min_start_time.result else 'No suitable time found' }}
          {%- else -%}
            No data available
          {%- endif -%}

  #calculate the average price for these 1 hour
  - platform: template
    sensors:
      average_price_vario_plus_1_hours_day:
        friendly_name: "Average Vario Plus cost for 1 hour during day"
        unit_of_measurement: "Rp./kWh"
        value_template: >
          {%- set start_time_str = states('sensor.cheapest_vario_plus_1_hours_day') -%}
          {%- set start_time = strptime(start_time_str, '%H:%M %d.%m.%Y').timestamp() -%}
          {%- set end_time = start_time + 3600 -%}
          {%- set vario_plus_values = state_attr('sensor.vario_plus_tarif_projection', 'vario_plus_for_tomorrow') -%}
          {%- set total_vario_plus = namespace(result=0) -%}
          {%- set count = namespace(result=0) -%}
          {%- for value in vario_plus_values -%}
            {%- set timestamp = as_timestamp(value.start_timestamp) -%}
            {%- if timestamp >= start_time and timestamp < end_time -%}
              {%- set total_vario_plus.result = total_vario_plus.result + (value.vario_plus | float) -%}
              {%- set count.result = count.result + 1 -%}
            {%- endif -%}
          {%- endfor -%}
          {{ (total_vario_plus.result / count.result) | round(2) if count.result > 0 else 'No data available' }}

  #Identify the time with the cheapest 2hours energy cost during day
  - platform: template
    sensors:
      cheapest_vario_plus_2_hours_day:
        friendly_name: "Cheapest Vario Plus for 2 hours during day"
        value_template: >
          {%- set vario_plus_values = state_attr('sensor.vario_plus_tarif_projection', 'vario_plus_for_tomorrow') -%}
          {%- set min_vario_plus = namespace(result=1000) -%}
          {%- set min_start_time = namespace(result=None) -%}
          {%- set intervals = 8 -%} 
          {%- if vario_plus_values and vario_plus_values | length > intervals -%}
            {%- for i in range(0, vario_plus_values | length - intervals + 1) -%}
              {%- set item_start = as_datetime(vario_plus_values[i].start_timestamp) -%}
              {%- set item_hour = item_start.hour -%}
              {%- if item_hour >= 7 and item_hour < 21 -%}
                {%- set total_vario_plus = namespace(result=0) -%}
                {%- for j in range(0, intervals) -%}
                  {%- set total_vario_plus.result = total_vario_plus.result + (vario_plus_values[i + j].vario_plus | float) -%}
                {%- endfor -%}
                {%- if min_vario_plus.result == None or total_vario_plus.result < min_vario_plus.result -%}
                  {%- set min_vario_plus.result = total_vario_plus.result -%}
                  {%- set min_start_time.result = vario_plus_values[i].start_timestamp -%}
                {%- endif -%}
              {%- endif -%}  
            {%- endfor -%}
            {{ as_timestamp(min_start_time.result) | timestamp_custom('%H:%M %d.%m.%Y') if min_start_time.result else 'No suitable time found' }}
          {%- else -%}
            No data available
          {%- endif -%}

  #calculate the average price for these 2 hours
  - platform: template
    sensors:
      average_price_vario_plus_2_hours_day:
        friendly_name: "Average Vario Plus cost for 2 hours during day"
        unit_of_measurement: "Rp./kWh"
        value_template: >
          {%- set start_time_str = states('sensor.cheapest_vario_plus_2_hours_day') -%}
          {%- set start_time = strptime(start_time_str, '%H:%M %d.%m.%Y').timestamp() -%}
          {%- set end_time = start_time + 7200 -%}
          {%- set vario_plus_values = state_attr('sensor.vario_plus_tarif_projection', 'vario_plus_for_tomorrow') -%}
          {%- set total_vario_plus = namespace(result=0) -%}
          {%- set count = namespace(result=0) -%}
          {%- for value in vario_plus_values -%}
            {%- set timestamp = as_timestamp(value.start_timestamp) -%}
            {%- if timestamp >= start_time and timestamp < end_time -%}
              {%- set total_vario_plus.result = total_vario_plus.result + (value.vario_plus | float) -%}
              {%- set count.result = count.result + 1 -%}
            {%- endif -%}
          {%- endfor -%}
          {{ (total_vario_plus.result / count.result) | round(2) if count.result > 0 else 'No data available' }}

  #Identify the time with the cheapest 3hours energy cost during day
  - platform: template
    sensors:
      cheapest_vario_plus_3_hours_day:
        friendly_name: "Cheapest Vario Plus for 3 hours during day"
        value_template: >
          {%- set vario_plus_values = state_attr('sensor.vario_plus_tarif_projection', 'vario_plus_for_tomorrow') -%}
          {%- set min_vario_plus = namespace(result=1000) -%}
          {%- set min_start_time = namespace(result=None) -%}
          {%- set intervals = 12 -%} 
          {%- if vario_plus_values and vario_plus_values | length > intervals -%}
            {%- for i in range(0, vario_plus_values | length - intervals + 1) -%}
              {%- set item_start = as_datetime(vario_plus_values[i].start_timestamp) -%}
              {%- set item_hour = item_start.hour -%}
              {%- if item_hour >= 7 and item_hour < 21 -%}
                {%- set total_vario_plus = namespace(result=0) -%}
                {%- for j in range(0, intervals) -%}
                  {%- set total_vario_plus.result = total_vario_plus.result + (vario_plus_values[i + j].vario_plus | float) -%}
                {%- endfor -%}
                {%- if min_vario_plus.result == None or total_vario_plus.result < min_vario_plus.result -%}
                  {%- set min_vario_plus.result = total_vario_plus.result -%}
                  {%- set min_start_time.result = vario_plus_values[i].start_timestamp -%}
                {%- endif -%}
              {%- endif -%}  
            {%- endfor -%}
            {{ as_timestamp(min_start_time.result) | timestamp_custom('%H:%M %d.%m.%Y') if min_start_time.result else 'No suitable time found' }}
          {%- else -%}
            No data available
          {%- endif -%}

  #calculate the average price for these 3 hours
  - platform: template
    sensors:
      average_price_vario_plus_3_hours_day:
        friendly_name: "Average Vario Plus cost for 3 hours during day"
        unit_of_measurement: "Rp./kWh"
        value_template: >
          {%- set start_time_str = states('sensor.cheapest_vario_plus_3_hours_day') -%}
          {%- set start_time = strptime(start_time_str, '%H:%M %d.%m.%Y').timestamp() -%}
          {%- set end_time = start_time + 10800 -%}
          {%- set vario_plus_values = state_attr('sensor.vario_plus_tarif_projection', 'vario_plus_for_tomorrow') -%}
          {%- set total_vario_plus = namespace(result=0) -%}
          {%- set count = namespace(result=0) -%}
          {%- for value in vario_plus_values -%}
            {%- set timestamp = as_timestamp(value.start_timestamp) -%}
            {%- if timestamp >= start_time and timestamp < end_time -%}
              {%- set total_vario_plus.result = total_vario_plus.result + (value.vario_plus | float) -%}
              {%- set count.result = count.result + 1 -%}
            {%- endif -%}
          {%- endfor -%}
          {{ (total_vario_plus.result / count.result) | round(2) if count.result > 0 else 'No data available' }}

automation:
  #Automate the update of vario plus projection at 18:00
  - id: "12345678901"
    alias: "Update Vario Plus Tarif Projection at 18:00"
    triggers:
      - trigger: time
        at: "18:01:00"
    conditions: []
    actions:
      - action: homeassistant.update_entity
        metadata: {}
        data:
          entity_id:
            - sensor.vario_plus_tarif_projection
  #Automate the update of dt plus projection at 18:00
  - id: "12345678902"
    alias: "Update dt Plus Tarif Projection at 18:00"
    triggers:
      - trigger: time
        at: "18:01:00"
    conditions: []
    actions:
      - action: homeassistant.update_entity
        metadata: {}
        data:
          entity_id:
            - sensor.dt_plus_tarif_projection
  #Automate the update of dt and vario plus live entity
  - id: "12345678903"
    alias: update dt and vario live price every 15min
    triggers:
      - trigger: time_pattern
        minutes: "0"
      - trigger: time_pattern
        minutes: "15"
      - trigger: time_pattern
        minutes: "30"
      - trigger: time_pattern
        minutes: "45"
    conditions: []
    actions:
      - action: homeassistant.update_entity
        metadata: {}
        data:
          entity_id:
            - sensor.vario_plus_tarif_live
            - sensor.dt_plus_tarif_live
    mode: single
